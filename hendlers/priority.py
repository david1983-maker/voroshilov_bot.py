from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext

from hendlers.state import PriorityState, UserState
from hendlers.tech import tech_list2
from keyboards.keyboard import result_kb, start_kb, wish_kb

router2 = Router()

wish_list = dict()


@router2.callback_query(F.data == 'ok4')
async def send_choice(call: types.CallbackQuery, state: FSMContext):
    global wish, tech_list
    await call.message.edit_text('............')
    await call.answer('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω üëå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n '
                      '–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.', show_alert=True)
    await call.message.answer('<b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞</b>')
    data = await state.get_data()
    form = data['form']
    island = data['island']
    style = data['style']
    dlina = data['dlina']
    shirina = data['shirina']
    visota = data['visota']
    potolok = data['potolok']

    if tech_list2[call.from_user.id] == 'tech':
        tech = data['tech']
        tech_list = f'<b>–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏</b>:\n{tech}'

    elif tech_list2[call.from_user.id] == 'tech1':
        tech = data['tech']
        tech1 = data['tech1']
        tech_list = f'<b>–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏</b>:\n{tech},\n{tech1}'

    elif tech_list2[call.from_user.id] == 'tech2':
        tech = data['tech']
        tech1 = data['tech1']
        tech2 = data['tech2']
        tech_list = f'<b>–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏</b>:\n{tech},\n{tech1},\n{tech2}'

    elif tech_list2[call.from_user.id] == 'tech3':
        tech = data['tech']
        tech1 = data['tech1']
        tech2 = data['tech2']
        tech3 = data['tech3']
        tech_list = (f'<b>–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏</b>:\n{tech},\n{tech1},\n{tech2},'
                     f'\n{tech3}')
    elif tech_list2[call.from_user.id] == 'tech4':
        tech = data['tech']
        tech1 = data['tech1']
        tech2 = data['tech2']
        tech3 = data['tech3']
        tech4 = data['tech4']
        tech_list = (f'<b>–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏</b>:\n{tech},\n{tech1},\n{tech2},'
                     f'\n{tech3},\n{tech4}')

    elif tech_list2[call.message.from_user.id] == 'tech5':
        tech = data['tech']
        tech1 = data['tech1']
        tech2 = data['tech2']
        tech3 = data['tech3']
        tech4 = data['tech4']
        tech5 = data['tech5']
        tech_list = (f'<b>–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏</b>:\n{tech},\n{tech1},\n{tech2},'
                     f'\n{tech3},\n{tech4},\n{tech5}')

    elif tech_list2[call.from_user.id] == 'tech6':
        tech = data['tech']
        tech1 = data['tech1']
        tech2 = data['tech2']
        tech3 = data['tech3']
        tech4 = data['tech4']
        tech5 = data['tech5']
        tech6 = data['tech6']
        tech_list = (f'<b>–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏</b>:\n{tech},\n{tech1},\n{tech2},\n{tech3}'
                     f',\n{tech4},\n{tech5},\n{tech6}')

    elif tech_list2[call.from_user.id] == 'tech7':
        tech = data['tech']
        tech1 = data['tech1']
        tech2 = data['tech2']
        tech3 = data['tech3']
        tech4 = data['tech4']
        tech5 = data['tech5']
        tech6 = data['tech6']
        tech7 = data['tech7']
        tech_list = (f'<b>–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏</b>:\n{tech},\n{tech1},\n{tech2},'
                     f'\n{tech3},\n{tech4},\n{tech5},'
                     f'\n{tech6},\n{tech7}')

    if wish_list[call.from_user.id] == 'wish1':
        wish1 = data['wish1']
        wish = f'<b>–í –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ:</b>\n<i>{wish1}</i>'
    elif wish_list[call.from_user.id] == 'wish2':
        wish1 = data['wish1']
        wish2 = data['wish2']
        wish = f'<b>–í –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ:</b>\n<i>{wish1}</i>\n<i>{wish2}</i>'

    result_list = f'''<b>–§–æ—Ä–º–∞ –∫—É—Ö–Ω–∏:</b><i>\n{form}</i>\n
<b>–ù–∞–ª–∏—á–∏–µ –æ—Å—Ç—Ä–æ–≤–∞</b>:\n{island}\n
<b>–°—Ç–∏–ª—å –∫—É—Ö–Ω–∏:</b>\n<i>{style}</i>\n
<b>–†–∞–∑–º–µ—Ä –∫—É—Ö–Ω–∏:</b>\n<i>–î–ª–∏–Ω–∞ - {dlina}</i>\n<i>–®–∏—Ä–∏–Ω–∞ - {shirina}</i>\n<i>–í—ã—Å–æ—Ç–∞ - {visota}</i>\n<i>–î–æ –ø–æ—Ç–æ–ª–∫–∞ - {potolok}</i>\n
{tech_list}\n
{wish}'''
    await call.message.answer(f'{result_list}')
    await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=result_kb)

    await call.answer()


@router2.callback_query(F.data == 'ok5', )
async def send_ok(call, state: FSMContext):
    await call.message.edit_text('<b>–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è: ‚úè</b>')
    await call.answer()
    await state.set_state(UserState.name)


@router2.callback_query(F.data == 'ok6')
async def send_repeat(call):
    await call.message.edit_text('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', reply_markup=start_kb)
    await call.answer()


@router2.callback_query(PriorityState.wish1)
async def send_wish1(call, state: FSMContext):
    await state.update_data(wish1=call.data)
    wish_list[call.from_user.id] = 'wish1'

    data = await state.get_data()
    wish1 = data['wish1']

    await call.message.edit_text(f'<b>–ß—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ</b> - 1:\t\t \n{wish1}',
                                 reply_markup=wish_kb)
    await call.answer()
    if call.data == 'ok5':
        await call.message.edit_text('<b>–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è</b>')
        await state.set_state(UserState.name)
    else:
        await state.set_state(PriorityState.wish2)


@router2.callback_query(PriorityState.wish2)
async def send_wish2(call, state: FSMContext):
    await state.update_data(wish2=call.data)
    wish_list[call.from_user.id] = 'wish2'
    data = await state.get_data()
    wish1 = data['wish1']
    wish2 = data['wish2']

    await call.message.edit_text(f'<b>–ß—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ</b> - 2:\t\t\n{wish1},\n{wish2}',
                                 reply_markup=wish_kb)
    await call.answer()
    await state.set_state(PriorityState.wish1)
